/**
 * vcharm Driver API
 * API for Vector's vcharm electric vehicle charging application
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vector.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChangePasswordRequest model module.
 * @module model/ChangePasswordRequest
 * @version 1.0.0
 */
class ChangePasswordRequest {
    /**
     * Constructs a new <code>ChangePasswordRequest</code>.
     * @alias module:model/ChangePasswordRequest
     * @param oldPassword {String} 
     * @param newPassword {String} 
     */
    constructor(oldPassword, newPassword) { 
        
        ChangePasswordRequest.initialize(this, oldPassword, newPassword);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, oldPassword, newPassword) { 
        obj['oldPassword'] = oldPassword;
        obj['newPassword'] = newPassword;
    }

    /**
     * Constructs a <code>ChangePasswordRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangePasswordRequest} obj Optional instance to populate.
     * @return {module:model/ChangePasswordRequest} The populated <code>ChangePasswordRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangePasswordRequest();

            if (data.hasOwnProperty('oldPassword')) {
                obj['oldPassword'] = ApiClient.convertToType(data['oldPassword'], 'String');
            }
            if (data.hasOwnProperty('newPassword')) {
                obj['newPassword'] = ApiClient.convertToType(data['newPassword'], 'String');
            }
            if (data.hasOwnProperty('codeChangePassword')) {
                obj['codeChangePassword'] = ApiClient.convertToType(data['codeChangePassword'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangePasswordRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangePasswordRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChangePasswordRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['oldPassword'] && !(typeof data['oldPassword'] === 'string' || data['oldPassword'] instanceof String)) {
            throw new Error("Expected the field `oldPassword` to be a primitive type in the JSON string but got " + data['oldPassword']);
        }
        // ensure the json data is a string
        if (data['newPassword'] && !(typeof data['newPassword'] === 'string' || data['newPassword'] instanceof String)) {
            throw new Error("Expected the field `newPassword` to be a primitive type in the JSON string but got " + data['newPassword']);
        }
        // ensure the json data is a string
        if (data['codeChangePassword'] && !(typeof data['codeChangePassword'] === 'string' || data['codeChangePassword'] instanceof String)) {
            throw new Error("Expected the field `codeChangePassword` to be a primitive type in the JSON string but got " + data['codeChangePassword']);
        }

        return true;
    }


}

ChangePasswordRequest.RequiredProperties = ["oldPassword", "newPassword"];

/**
 * @member {String} oldPassword
 */
ChangePasswordRequest.prototype['oldPassword'] = undefined;

/**
 * @member {String} newPassword
 */
ChangePasswordRequest.prototype['newPassword'] = undefined;

/**
 * Required only for password reset flow
 * @member {String} codeChangePassword
 */
ChangePasswordRequest.prototype['codeChangePassword'] = undefined;






export default ChangePasswordRequest;

