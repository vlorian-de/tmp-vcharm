/**
 * vcharm Driver API
 * API for Vector's vcharm electric vehicle charging application
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vector.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChargingSession from '../model/ChargingSession';
import CurrentChargingSession from '../model/CurrentChargingSession';
import Vehicle from '../model/Vehicle';
import VehicleDetail from '../model/VehicleDetail';

/**
* Vehicles service.
* @module api/VehiclesApi
* @version 1.0.0
*/
export default class VehiclesApi {

    /**
    * Constructs a new VehiclesApi. 
    * @alias module:api/VehiclesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getChargingHistory operation.
     * @callback module:api/VehiclesApi~getChargingHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChargingSession>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get charging history
     * Returns the charging history for a specific vehicle
     * @param {String} driverId ID of the driver
     * @param {String} vehicleId ID of the vehicle
     * @param {Object} opts Optional parameters
     * @param {Date} [from] Start date for filtering (ISO 8601)
     * @param {Date} [to] End date for filtering (ISO 8601)
     * @param {Number} [limit = 20)] Maximum number of records to return
     * @param {Number} [offset = 0)] Number of records to skip
     * @param {module:api/VehiclesApi~getChargingHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChargingSession>}
     */
    getChargingHistory(driverId, vehicleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'driverId' is set
      if (driverId === undefined || driverId === null) {
        throw new Error("Missing the required parameter 'driverId' when calling getChargingHistory");
      }
      // verify the required parameter 'vehicleId' is set
      if (vehicleId === undefined || vehicleId === null) {
        throw new Error("Missing the required parameter 'vehicleId' when calling getChargingHistory");
      }

      let pathParams = {
        'driver_id': driverId,
        'vehicle_id': vehicleId
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChargingSession];
      return this.apiClient.callApi(
        '/drivers/{driver_id}/vehicles/{vehicle_id}/charging-sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentChargingSession operation.
     * @callback module:api/VehiclesApi~getCurrentChargingSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrentChargingSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current charging session
     * Returns information about the current charging session for a specific vehicle
     * @param {String} driverId ID of the driver
     * @param {String} vehicleId ID of the vehicle
     * @param {module:api/VehiclesApi~getCurrentChargingSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrentChargingSession}
     */
    getCurrentChargingSession(driverId, vehicleId, callback) {
      let postBody = null;
      // verify the required parameter 'driverId' is set
      if (driverId === undefined || driverId === null) {
        throw new Error("Missing the required parameter 'driverId' when calling getCurrentChargingSession");
      }
      // verify the required parameter 'vehicleId' is set
      if (vehicleId === undefined || vehicleId === null) {
        throw new Error("Missing the required parameter 'vehicleId' when calling getCurrentChargingSession");
      }

      let pathParams = {
        'driver_id': driverId,
        'vehicle_id': vehicleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurrentChargingSession;
      return this.apiClient.callApi(
        '/drivers/{driver_id}/vehicles/{vehicle_id}/charging-sessions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverVehicles operation.
     * @callback module:api/VehiclesApi~getDriverVehiclesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vehicle>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all vehicles for a driver
     * Returns a list of vehicles for a specific driver
     * @param {String} driverId ID of the driver
     * @param {module:api/VehiclesApi~getDriverVehiclesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vehicle>}
     */
    getDriverVehicles(driverId, callback) {
      let postBody = null;
      // verify the required parameter 'driverId' is set
      if (driverId === undefined || driverId === null) {
        throw new Error("Missing the required parameter 'driverId' when calling getDriverVehicles");
      }

      let pathParams = {
        'driver_id': driverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vehicle];
      return this.apiClient.callApi(
        '/drivers/{driver_id}/vehicles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVehicleInfo operation.
     * @callback module:api/VehiclesApi~getVehicleInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VehicleDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vehicle information
     * Returns detailed information for a specific vehicle
     * @param {String} driverId ID of the driver
     * @param {String} vehicleId ID of the vehicle
     * @param {module:api/VehiclesApi~getVehicleInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VehicleDetail}
     */
    getVehicleInfo(driverId, vehicleId, callback) {
      let postBody = null;
      // verify the required parameter 'driverId' is set
      if (driverId === undefined || driverId === null) {
        throw new Error("Missing the required parameter 'driverId' when calling getVehicleInfo");
      }
      // verify the required parameter 'vehicleId' is set
      if (vehicleId === undefined || vehicleId === null) {
        throw new Error("Missing the required parameter 'vehicleId' when calling getVehicleInfo");
      }

      let pathParams = {
        'driver_id': driverId,
        'vehicle_id': vehicleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VehicleDetail;
      return this.apiClient.callApi(
        '/drivers/{driver_id}/vehicles/{vehicle_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
