/**
 * vcharm Driver API
 * API for Vector's vcharm electric vehicle charging application
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vector.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangePasswordRequest from '../model/ChangePasswordRequest';
import ChangePasswordResponse from '../model/ChangePasswordResponse';
import ForgotPasswordRequest from '../model/ForgotPasswordRequest';
import ForgotPasswordResponse from '../model/ForgotPasswordResponse';
import LoginRequest from '../model/LoginRequest';
import LoginResponse from '../model/LoginResponse';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 1.0.0
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/AuthenticationApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangePasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password
     * Changes the user's password
     * @param {module:model/ChangePasswordRequest} changePasswordRequest 
     * @param {module:api/AuthenticationApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangePasswordResponse}
     */
    changePassword(changePasswordRequest, callback) {
      let postBody = changePasswordRequest;
      // verify the required parameter 'changePasswordRequest' is set
      if (changePasswordRequest === undefined || changePasswordRequest === null) {
        throw new Error("Missing the required parameter 'changePasswordRequest' when calling changePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChangePasswordResponse;
      return this.apiClient.callApi(
        '/change-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forgotPassword operation.
     * @callback module:api/AuthenticationApi~forgotPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForgotPasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request password reset
     * Initiates the password reset process
     * @param {module:model/ForgotPasswordRequest} forgotPasswordRequest 
     * @param {module:api/AuthenticationApi~forgotPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForgotPasswordResponse}
     */
    forgotPassword(forgotPasswordRequest, callback) {
      let postBody = forgotPasswordRequest;
      // verify the required parameter 'forgotPasswordRequest' is set
      if (forgotPasswordRequest === undefined || forgotPasswordRequest === null) {
        throw new Error("Missing the required parameter 'forgotPasswordRequest' when calling forgotPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ForgotPasswordResponse;
      return this.apiClient.callApi(
        '/forgot-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/AuthenticationApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login to the system
     * Authenticates a user and returns a session token
     * @param {module:model/LoginRequest} loginRequest 
     * @param {module:api/AuthenticationApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponse}
     */
    login(loginRequest, callback) {
      let postBody = loginRequest;
      // verify the required parameter 'loginRequest' is set
      if (loginRequest === undefined || loginRequest === null) {
        throw new Error("Missing the required parameter 'loginRequest' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginResponse;
      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
