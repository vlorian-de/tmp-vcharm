/**
 * vcharm Driver API
 * API for Vector's vcharm electric vehicle charging application
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vector.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Vehicle from './Vehicle';
import VehicleDetailAllOfSettings from './VehicleDetailAllOfSettings';

/**
 * The VehicleDetail model module.
 * @module model/VehicleDetail
 * @version 1.0.0
 */
class VehicleDetail {
    /**
     * Constructs a new <code>VehicleDetail</code>.
     * @alias module:model/VehicleDetail
     * @implements module:model/Vehicle
     */
    constructor() { 
        Vehicle.initialize(this);
        VehicleDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VehicleDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VehicleDetail} obj Optional instance to populate.
     * @return {module:model/VehicleDetail} The populated <code>VehicleDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VehicleDetail();
            Vehicle.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
            if (data.hasOwnProperty('licensePlate')) {
                obj['licensePlate'] = ApiClient.convertToType(data['licensePlate'], 'String');
            }
            if (data.hasOwnProperty('batteryCapacity')) {
                obj['batteryCapacity'] = ApiClient.convertToType(data['batteryCapacity'], 'Number');
            }
            if (data.hasOwnProperty('currentBatteryLevel')) {
                obj['currentBatteryLevel'] = ApiClient.convertToType(data['currentBatteryLevel'], 'Number');
            }
            if (data.hasOwnProperty('isCharging')) {
                obj['isCharging'] = ApiClient.convertToType(data['isCharging'], 'Boolean');
            }
            if (data.hasOwnProperty('lastSeen')) {
                obj['lastSeen'] = ApiClient.convertToType(data['lastSeen'], 'Date');
            }
            if (data.hasOwnProperty('totalMileage')) {
                obj['totalMileage'] = ApiClient.convertToType(data['totalMileage'], 'Number');
            }
            if (data.hasOwnProperty('avgConsumption')) {
                obj['avgConsumption'] = ApiClient.convertToType(data['avgConsumption'], 'Number');
            }
            if (data.hasOwnProperty('vinNumber')) {
                obj['vinNumber'] = ApiClient.convertToType(data['vinNumber'], 'String');
            }
            if (data.hasOwnProperty('chargePortType')) {
                obj['chargePortType'] = ApiClient.convertToType(data['chargePortType'], 'String');
            }
            if (data.hasOwnProperty('maxChargingRate')) {
                obj['maxChargingRate'] = ApiClient.convertToType(data['maxChargingRate'], 'Number');
            }
            if (data.hasOwnProperty('estimatedRange')) {
                obj['estimatedRange'] = ApiClient.convertToType(data['estimatedRange'], 'Number');
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = VehicleDetailAllOfSettings.constructFromObject(data['settings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VehicleDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VehicleDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['make'] && !(typeof data['make'] === 'string' || data['make'] instanceof String)) {
            throw new Error("Expected the field `make` to be a primitive type in the JSON string but got " + data['make']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['licensePlate'] && !(typeof data['licensePlate'] === 'string' || data['licensePlate'] instanceof String)) {
            throw new Error("Expected the field `licensePlate` to be a primitive type in the JSON string but got " + data['licensePlate']);
        }
        // ensure the json data is a string
        if (data['vinNumber'] && !(typeof data['vinNumber'] === 'string' || data['vinNumber'] instanceof String)) {
            throw new Error("Expected the field `vinNumber` to be a primitive type in the JSON string but got " + data['vinNumber']);
        }
        // ensure the json data is a string
        if (data['chargePortType'] && !(typeof data['chargePortType'] === 'string' || data['chargePortType'] instanceof String)) {
            throw new Error("Expected the field `chargePortType` to be a primitive type in the JSON string but got " + data['chargePortType']);
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          VehicleDetailAllOfSettings.validateJSON(data['settings']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
VehicleDetail.prototype['id'] = undefined;

/**
 * @member {String} name
 */
VehicleDetail.prototype['name'] = undefined;

/**
 * @member {String} make
 */
VehicleDetail.prototype['make'] = undefined;

/**
 * @member {String} model
 */
VehicleDetail.prototype['model'] = undefined;

/**
 * @member {Number} year
 */
VehicleDetail.prototype['year'] = undefined;

/**
 * @member {String} licensePlate
 */
VehicleDetail.prototype['licensePlate'] = undefined;

/**
 * Battery capacity in kWh
 * @member {Number} batteryCapacity
 */
VehicleDetail.prototype['batteryCapacity'] = undefined;

/**
 * Current battery level in percentage
 * @member {Number} currentBatteryLevel
 */
VehicleDetail.prototype['currentBatteryLevel'] = undefined;

/**
 * @member {Boolean} isCharging
 */
VehicleDetail.prototype['isCharging'] = undefined;

/**
 * @member {Date} lastSeen
 */
VehicleDetail.prototype['lastSeen'] = undefined;

/**
 * Total mileage in kilometers
 * @member {Number} totalMileage
 */
VehicleDetail.prototype['totalMileage'] = undefined;

/**
 * Average consumption in kWh/100km
 * @member {Number} avgConsumption
 */
VehicleDetail.prototype['avgConsumption'] = undefined;

/**
 * @member {String} vinNumber
 */
VehicleDetail.prototype['vinNumber'] = undefined;

/**
 * @member {String} chargePortType
 */
VehicleDetail.prototype['chargePortType'] = undefined;

/**
 * Maximum charging rate in kW
 * @member {Number} maxChargingRate
 */
VehicleDetail.prototype['maxChargingRate'] = undefined;

/**
 * Estimated range in kilometers
 * @member {Number} estimatedRange
 */
VehicleDetail.prototype['estimatedRange'] = undefined;

/**
 * @member {module:model/VehicleDetailAllOfSettings} settings
 */
VehicleDetail.prototype['settings'] = undefined;


// Implement Vehicle interface:
/**
 * @member {String} id
 */
Vehicle.prototype['id'] = undefined;
/**
 * @member {String} name
 */
Vehicle.prototype['name'] = undefined;
/**
 * @member {String} make
 */
Vehicle.prototype['make'] = undefined;
/**
 * @member {String} model
 */
Vehicle.prototype['model'] = undefined;
/**
 * @member {Number} year
 */
Vehicle.prototype['year'] = undefined;
/**
 * @member {String} licensePlate
 */
Vehicle.prototype['licensePlate'] = undefined;
/**
 * Battery capacity in kWh
 * @member {Number} batteryCapacity
 */
Vehicle.prototype['batteryCapacity'] = undefined;
/**
 * Current battery level in percentage
 * @member {Number} currentBatteryLevel
 */
Vehicle.prototype['currentBatteryLevel'] = undefined;
/**
 * @member {Boolean} isCharging
 */
Vehicle.prototype['isCharging'] = undefined;
/**
 * @member {Date} lastSeen
 */
Vehicle.prototype['lastSeen'] = undefined;




export default VehicleDetail;

