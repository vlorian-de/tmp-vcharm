/**
 * vcharm Driver API
 * API for Vector's vcharm electric vehicle charging application
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vector.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChargingSessionChargingCurveInner from './ChargingSessionChargingCurveInner';
import ChargingSessionLocation from './ChargingSessionLocation';

/**
 * The ChargingSession model module.
 * @module model/ChargingSession
 * @version 1.0.0
 */
class ChargingSession {
    /**
     * Constructs a new <code>ChargingSession</code>.
     * @alias module:model/ChargingSession
     */
    constructor() { 
        
        ChargingSession.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChargingSession</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChargingSession} obj Optional instance to populate.
     * @return {module:model/ChargingSession} The populated <code>ChargingSession</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChargingSession();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('vehicleId')) {
                obj['vehicleId'] = ApiClient.convertToType(data['vehicleId'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('startBatteryLevel')) {
                obj['startBatteryLevel'] = ApiClient.convertToType(data['startBatteryLevel'], 'Number');
            }
            if (data.hasOwnProperty('endBatteryLevel')) {
                obj['endBatteryLevel'] = ApiClient.convertToType(data['endBatteryLevel'], 'Number');
            }
            if (data.hasOwnProperty('energyDelivered')) {
                obj['energyDelivered'] = ApiClient.convertToType(data['energyDelivered'], 'Number');
            }
            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('chargingStationId')) {
                obj['chargingStationId'] = ApiClient.convertToType(data['chargingStationId'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ChargingSessionLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('chargingCurve')) {
                obj['chargingCurve'] = ApiClient.convertToType(data['chargingCurve'], [ChargingSessionChargingCurveInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChargingSession</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChargingSession</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['vehicleId'] && !(typeof data['vehicleId'] === 'string' || data['vehicleId'] instanceof String)) {
            throw new Error("Expected the field `vehicleId` to be a primitive type in the JSON string but got " + data['vehicleId']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['chargingStationId'] && !(typeof data['chargingStationId'] === 'string' || data['chargingStationId'] instanceof String)) {
            throw new Error("Expected the field `chargingStationId` to be a primitive type in the JSON string but got " + data['chargingStationId']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          ChargingSessionLocation.validateJSON(data['location']);
        }
        if (data['chargingCurve']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['chargingCurve'])) {
                throw new Error("Expected the field `chargingCurve` to be an array in the JSON data but got " + data['chargingCurve']);
            }
            // validate the optional field `chargingCurve` (array)
            for (const item of data['chargingCurve']) {
                ChargingSessionChargingCurveInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} id
 */
ChargingSession.prototype['id'] = undefined;

/**
 * @member {String} vehicleId
 */
ChargingSession.prototype['vehicleId'] = undefined;

/**
 * @member {Date} startTime
 */
ChargingSession.prototype['startTime'] = undefined;

/**
 * @member {Date} endTime
 */
ChargingSession.prototype['endTime'] = undefined;

/**
 * Duration in seconds
 * @member {Number} duration
 */
ChargingSession.prototype['duration'] = undefined;

/**
 * Battery level at start in percentage
 * @member {Number} startBatteryLevel
 */
ChargingSession.prototype['startBatteryLevel'] = undefined;

/**
 * Battery level at end in percentage
 * @member {Number} endBatteryLevel
 */
ChargingSession.prototype['endBatteryLevel'] = undefined;

/**
 * Energy delivered in kWh
 * @member {Number} energyDelivered
 */
ChargingSession.prototype['energyDelivered'] = undefined;

/**
 * Cost in currency units
 * @member {Number} cost
 */
ChargingSession.prototype['cost'] = undefined;

/**
 * @member {String} currency
 */
ChargingSession.prototype['currency'] = undefined;

/**
 * @member {String} chargingStationId
 */
ChargingSession.prototype['chargingStationId'] = undefined;

/**
 * @member {module:model/ChargingSessionLocation} location
 */
ChargingSession.prototype['location'] = undefined;

/**
 * @member {Array.<module:model/ChargingSessionChargingCurveInner>} chargingCurve
 */
ChargingSession.prototype['chargingCurve'] = undefined;






export default ChargingSession;

