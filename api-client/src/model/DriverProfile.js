/**
 * vcharm Driver API
 * API for Vector's vcharm electric vehicle charging application
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vector.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DriverProfilePreferences from './DriverProfilePreferences';

/**
 * The DriverProfile model module.
 * @module model/DriverProfile
 * @version 1.0.0
 */
class DriverProfile {
    /**
     * Constructs a new <code>DriverProfile</code>.
     * @alias module:model/DriverProfile
     */
    constructor() { 
        
        DriverProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DriverProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DriverProfile} obj Optional instance to populate.
     * @return {module:model/DriverProfile} The populated <code>DriverProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DriverProfile();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('organizationId')) {
                obj['organizationId'] = ApiClient.convertToType(data['organizationId'], 'String');
            }
            if (data.hasOwnProperty('preferences')) {
                obj['preferences'] = DriverProfilePreferences.constructFromObject(data['preferences']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DriverProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DriverProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['organizationId'] && !(typeof data['organizationId'] === 'string' || data['organizationId'] instanceof String)) {
            throw new Error("Expected the field `organizationId` to be a primitive type in the JSON string but got " + data['organizationId']);
        }
        // validate the optional field `preferences`
        if (data['preferences']) { // data not null
          DriverProfilePreferences.validateJSON(data['preferences']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
DriverProfile.prototype['id'] = undefined;

/**
 * @member {String} username
 */
DriverProfile.prototype['username'] = undefined;

/**
 * @member {String} firstName
 */
DriverProfile.prototype['firstName'] = undefined;

/**
 * @member {String} lastName
 */
DriverProfile.prototype['lastName'] = undefined;

/**
 * @member {String} email
 */
DriverProfile.prototype['email'] = undefined;

/**
 * @member {String} phoneNumber
 */
DriverProfile.prototype['phoneNumber'] = undefined;

/**
 * @member {String} organizationId
 */
DriverProfile.prototype['organizationId'] = undefined;

/**
 * @member {module:model/DriverProfilePreferences} preferences
 */
DriverProfile.prototype['preferences'] = undefined;

/**
 * @member {Date} createdAt
 */
DriverProfile.prototype['createdAt'] = undefined;

/**
 * @member {Date} updatedAt
 */
DriverProfile.prototype['updatedAt'] = undefined;






export default DriverProfile;

